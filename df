[1mdiff --git a/build/classes/download/manager/Download.class b/build/classes/download/manager/Download.class[m
[1mindex 194cc89..8440bf9 100644[m
Binary files a/build/classes/download/manager/Download.class and b/build/classes/download/manager/Download.class differ
[1mdiff --git a/nbproject/private/private.xml b/nbproject/private/private.xml[m
[1mindex 1071aad..e326a28 100644[m
[1m--- a/nbproject/private/private.xml[m
[1m+++ b/nbproject/private/private.xml[m
[36m@@ -11,6 +11,8 @@[m
         </file>[m
     </editor-bookmarks>[m
     <open-files xmlns="http://www.netbeans.org/ns/projectui-open-files/2">[m
[31m-        <group/>[m
[32m+[m[32m        <group>[m
[32m+[m[32m            <file>file:/F:/Projects/My%20Projects/Networking%20Lab/Download_Manager/src/download/manager/abc.java</file>[m
[32m+[m[32m        </group>[m
     </open-files>[m
 </project-private>[m
[1mdiff --git a/src/download/manager/Download.java b/src/download/manager/Download.java[m
[1mindex 797bca7..29ba4ea 100644[m
[1m--- a/src/download/manager/Download.java[m
[1m+++ b/src/download/manager/Download.java[m
[36m@@ -9,7 +9,6 @@[m [mpackage download.manager;[m
  *[m
  * @author NowshadApu[m
  */[m
[31m-[m
 import java.io.*;[m
 import java.net.HttpURLConnection;[m
 import java.net.URL;[m
[36m@@ -18,227 +17,310 @@[m [mimport java.util.*;[m
 import java.net.*;[m
 import java.nio.file.Path;[m
 [m
[31m-[m
 public class Download extends Observable implements Runnable {[m
[31m-    [m
[31m-    private static final int MAX_BUFFER_SIZE=1024;[m
[31m-    public static final String STATUSES[]={"Downloading","Paused","Complete","Cancelled","Error"};[m
[31m-    [m
[31m-    public static final int DOWNLOADING=0;[m
[31m-    public static final int PAUSED=1;[m
[31m-    public static final int COMPLETE=2;[m
[31m-    public static final int CANCELLED=3;[m
[31m-    public static final int ERROR=4;[m
[31m-    [m
[31m-    private URL url;[m
[31m-    private int size;[m
[31m-    private int downloaded;[m
[31m-    private int status;[m
[31m-    [m
[32m+[m
[32m+[m[32m    public static final int MAX_BUFFER_SIZE = 1024;[m
[32m+[m[32m    public static final String STATUSES[] = {"Downloading", "Paused", "Complete", "Cancelled", "Error"};[m
[32m+[m
[32m+[m[32m    public static final int DOWNLOADING = 0;[m
[32m+[m[32m    public static final int PAUSED = 1;[m
[32m+[m[32m    public static final int COMPLETE = 2;[m
[32m+[m[32m    public static final int CANCELLED = 3;[m
[32m+[m[32m    public static final int ERROR = 4;[m
[32m+[m
[32m+[m[32m    public URL url;[m
[32m+[m[32m    public int size;[m
[32m+[m[32m    public int downloaded;[m
[32m+[m[32m    public int status;[m
[32m+[m
     public String fileNameNew;[m
[32m+[m[32m    public int counter1 = 0;[m
     [m
[31m-    public Download(URL url)[m
[31m-    {[m
[31m-        this.url=url;[m
[31m-        size=-1;[m
[31m-        downloaded=0;[m
[31m-        status=DOWNLOADING;[m
[31m-        [m
[32m+[m[32m    /*The reason for taking two dimensional byte array is to store the byte arrarys in another array. I don't want to read and write sequentially.[m
[32m+[m[32m        My plan is to read all the byte arrays sequentially or separately and then to write sequentially.[m[41m [m
[32m+[m[32m*/[m
[32m+[m[32m    byte buffer1[][] = new byte[100000][MAX_BUFFER_SIZE];[m
[32m+[m[32m    byte buffer2[][] = new byte[100000][MAX_BUFFER_SIZE];[m
[32m+[m[41m    [m
[32m+[m[32m    //These two read array are also for storing 'read' information from reading bytes.[m
[32m+[m
[32m+[m[32m    int[] read1 = new int[100000];[m
[32m+[m[32m    int[] read2 = new int[100000];[m
[32m+[m
[32m+[m[32m    public Download(URL url) {[m
[32m+[m[32m        this.url = url;[m
[32m+[m[32m        size = -1;[m
[32m+[m[32m        downloaded = 0;[m
[32m+[m[32m        status = DOWNLOADING;[m
[32m+[m
         download();[m
     }[m
[31m-     public String getUrl()[m
[31m-     {[m
[31m-         return url.toString();[m
[31m-     }[m
[31m-     [m
[31m-     public int getSize()[m
[31m-     {[m
[31m-         return size;[m
[31m-     }[m
[31m-     [m
[31m-     public float getProgress()[m
[31m-     {[m
[31m-         return ((float)downloaded/size)*100;[m
[31m-     }[m
[31m-     [m
[31m-     public int getStatus(){[m
[31m-         return status;[m
[31m-     }[m
[31m-     [m
[31m-     public void pause()[m
[31m-     {[m
[31m-         status=PAUSED;[m
[31m-         stateChanged();[m
[31m-     }[m
[31m-     [m
[31m-     public void cancel()[m
[31m-     {[m
[31m-         status=CANCELLED;[m
[31m-         stateChanged();[m
[31m-     }[m
[31m-     [m
[31m-     public void resume()[m
[31m-     {[m
[31m-         status=DOWNLOADING;[m
[31m-         stateChanged();[m
[31m-         download();[m
[31m-     }[m
[31m-     [m
[31m-     private void error()[m
[31m-     {[m
[31m-         status=ERROR;[m
[31m-         stateChanged();[m
[31m-     }[m
 [m
[31m-    [m
[32m+[m[32m    public String getUrl() {[m
[32m+[m[32m        return url.toString();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public int getSize() {[m
[32m+[m[32m        return size;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public float getProgress() {[m
[32m+[m[32m        return ((float) downloaded / size) * 100;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public int getStatus() {[m
[32m+[m[32m        return status;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void pause() {[m
[32m+[m[32m        status = PAUSED;[m
[32m+[m[32m        stateChanged();[m
[32m+[m[32m    }[m
 [m
[31m-    private void download() {[m
[31m-        Thread thread=new Thread(this);[m
[32m+[m[32m    public void cancel() {[m
[32m+[m[32m        status = CANCELLED;[m
[32m+[m[32m        stateChanged();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void resume() {[m
[32m+[m[32m        status = DOWNLOADING;[m
[32m+[m[32m        stateChanged();[m
[32m+[m[32m        download();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void error() {[m
[32m+[m[32m        status = ERROR;[m
[32m+[m[32m        stateChanged();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void download() {[m
[32m+[m[32m        Thread thread = new Thread(this);[m
         thread.start();[m
     }[m
[31m-    [m
[31m-    public String getFileName(URL url)[m
[31m-    {[m
[31m-        String fileName=url.getFile();[m
[31m-        return fileName.substring(fileName.lastIndexOf('/')+1);[m
[31m-        [m
[31m-        [m
[32m+[m
[32m+[m[32m    public String getFileName(URL url) {[m
[32m+[m
[32m+[m[32m        String fileName = url.getFile();[m
[32m+[m[32m        return fileName.substring(fileName.lastIndexOf('/') + 1);[m
[32m+[m
     }[m
[31m-    [m
[31m-     public void run ()[m
[31m-     {[m
[31m-         RandomAccessFile file=null;[m
[31m-         InputStream stream=null;[m
[31m-         [m
[31m-         try{[m
[31m-             HttpURLConnection connection=(HttpURLConnection)url.openConnection();[m
[31m-             connection.setRequestProperty("Range", "bytes="+downloaded+"-");[m
[31m-             connection.connect();[m
[31m-             [m
[31m-             if(connection.getResponseCode()/100!=2)[m
[31m-             {[m
[31m-                 error();[m
[31m-             }[m
[31m-             [m
[31m-             int contentLength=connection.getContentLength();[m
[31m-             if(contentLength<1)[m
[31m-                 error();[m
[31m-             [m
[31m-             if(size==-1)[m
[31m-             {[m
[31m-                 size=contentLength;[m
[31m-                 stateChanged();[m
[31m-             }[m
[31m-             [m
[31m-             fileNameNew=getFileName(url);[m
[31m-             file=new RandomAccessFile(getFileName(url),"rw");[m
[31m-             file.seek(downloaded);[m
[31m-             //System.out.println(fileNameNew);[m
[31m-             [m
[31m-             [m
[31m-             stream=connection.getInputStream();[m
[31m-             while(status==DOWNLOADING)[m
[31m-             {[m
[31m-                 byte buffer[];[m
[31m-                 if(size-downloaded>MAX_BUFFER_SIZE)[m
[31m-                     buffer=new byte[MAX_BUFFER_SIZE];[m
[31m-                 else[m
[31m-                     buffer=new byte[size-downloaded];[m
[31m-                 [m
[31m-                 int read=stream.read(buffer);[m
[31m-             if(read==-1)[m
[31m-                 break;[m
[31m-             [m
[31m-             file.write( buffer,0,read);[m
[31m-             downloaded+=read;[m
[31m-             stateChanged();[m
[31m-             }[m
[31m-             [m
[31m-             if(status==DOWNLOADING)[m
[31m-             {[m
[31m-                 status=COMPLETE;[m
[31m-                 stateChanged();[m
[31m-             [m
[31m-             }[m
[31m-             [m
[31m-             [m
[31m-             String movingDirectory=DownloadManager.targetDirectory;[m
[31m-             System.out.println(movingDirectory);[m
[31m-            /* String currentDirectory=System.getProperty("user.dir");[m
[31m-                    [m
[31m-             [m
[31m-             [m
[31m-             [m
[31m-            // System.out.println(currentDirectory+" "+movingDirectory);[m
[31m-             [m
[31m-             try{[m
[31m-[m
[31m-    	   File afile =new File(currentDirectory+"\\"+getFileName(url));[m
[31m-[m
[31m-    	   if(afile.renameTo(new File(movingDirectory+"\\"+getFileName(url)+afile.getName()))){[m
[31m-    		System.out.println("File is moved successful!");[m
[31m-    	   }else{[m
[31m-    		System.out.println("File is failed to move!");[m
[31m-    	   }[m
[31m-[m
[31m-    	}catch(Exception e){[m
[31m-    		e.printStackTrace();[m
[31m-    	}[m
[31m-             */[m
[31m-             [m
[31m-         }catch(Exception e)[m
[31m-         {[m
[31m-             error();[m
[31m-         }[m
[31m-         finally[m
[31m-         {[m
[31m-             if(file!=null)[m
[31m-             {[m
[31m-                 [m
[31m-                 [m
[31m-                 String movingDirectory=DownloadManager.targetDirectory;[m
[31m-             String currentDirectory=System.getProperty("user.dir");[m
[31m-                 [m
[31m-                 try[m
[31m-                 {[m
[31m-                     file.close();[m
[31m-                     [m
[31m-                     try{[m
[31m-[m
[31m-    	   File afile =new File(currentDirectory+"\\"+getFileName(url));[m
[31m-[m
[31m-    	   if(afile.renameTo(new File(movingDirectory+"\\"+getFileName(url)))){[m
[31m-    		System.out.println("File is moved successful!");[m
[31m-    	   }else{[m
[31m-    		System.out.println("File is failed to move!");[m
[31m-    	   }[m
[31m-[m
[31m-    	}catch(Exception e){[m
[31m-    		e.printStackTrace();[m
[31m-    	}[m
[31m-                     [m
[31m-                     [m
[31m-                     [m
[31m-                     [m
[31m-                 }catch(Exception e)[m
[31m-                 {[m
[31m-                     e.printStackTrace();[m
[31m-                 }[m
[31m-             }[m
[31m-             [m
[31m-             if(stream!=null)[m
[31m-             {[m
[31m-                 try{[m
[31m-                     stream.close();[m
[31m-                 }catch(Exception e)[m
[31m-                 { e.printStackTrace();}[m
[31m-             }[m
[31m-         }[m
[31m-     }[m
[31m-     [m
[31m-     private void stateChanged() {[m
[32m+[m[32m    RandomAccessFile file = null;[m
[32m+[m[32m    RandomAccessFile file2 = null;[m
[32m+[m[32m    InputStream stream = null;[m
[32m+[m[32m    InputStream stream2 = null;[m
[32m+[m[32m    int a, b;[m
[32m+[m[32m    abc ABC;[m
[32m+[m
[32m+[m[32m    public void run() {[m
[32m+[m
[32m+[m[32m        try {[m
[32m+[m
[32m+[m[32m            HttpURLConnection connection = (HttpURLConnection) url.openConnection();[m
[32m+[m
[32m+[m[32m            connection.setRequestProperty("Range", "bytes=" + downloaded + "-");[m
[32m+[m[32m            connection.connect();[m
[32m+[m
[32m+[m[41m           [m
[32m+[m[32m            if (connection.getResponseCode() / 100 != 2) {[m
[32m+[m[32m                error();[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            int contentLength = connection.getContentLength();[m
[32m+[m
[32m+[m[32m            if (contentLength < 1) {[m
[32m+[m[32m                error();[m
[32m+[m[32m            }[m
[32m+[m[32m            System.out.println("Full Content is " + contentLength);[m
[32m+[m
[32m+[m[32m            if (size == -1) {[m
[32m+[m[32m                size = 10000;[m[41m           [m
[32m+[m[32m/*Some of the place in the code I use 10000.It means that I want to download 10000 bytes at the first time.[m
[32m+[m[32m                Then remaining bytes will be downloaded.[m
[32m+[m[32m                */[m
[32m+[m
[32m+[m[32m                stateChanged();[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            fileNameNew = getFileName(url);[m
[32m+[m[32m            file = new RandomAccessFile(getFileName(url), "rw");[m
[32m+[m
[32m+[m[32m            file.seek(downloaded);[m
[32m+[m
[32m+[m[32m            stream = connection.getInputStream();[m
[32m+[m
[32m+[m[32m            size = 10000;[m
[32m+[m[32m            downloaded = 0;[m
[32m+[m[41m            [m
[32m+[m[32m            /*[m
[32m+[m[32m            Here I make a function named 'function1' to download the first 10000 bytes.I use 'size' and 'downloaded' as parameter.[m[41m  [m
[32m+[m[32m            */[m
[32m+[m[41m            [m
[32m+[m[32m            function1(size, downloaded);[m
[32m+[m
[32m+[m[32m            System.out.println("Starting of FUNCTION2");[m
[32m+[m[41m            [m
[32m+[m[32m            /*[m
[32m+[m[32m            'function2' downloads  from 100001(In original,I think 1000001+1215) to remainging bytes.[m
[32m+[m[32m            */[m
[32m+[m
[32m+[m[32m            int sizeX = contentLength;[m
[32m+[m[32m            int downloadedX = 10000 + 1215;[m
[32m+[m[32m            int counter2 = finction2(sizeX, downloadedX);[m
[32m+[m
[32m+[m[32m            /*[m
[32m+[m[32m            From this thread(Main thread) I run another thread from 'abc' class from 'function1'. So, I wait here untill that thread finishes its work. After[m[41m [m
[32m+[m[32m            finishing I write the random access file with buffer1(from function1) and buffer2 (from function2).[m
[32m+[m[32m            */[m
[32m+[m[41m            [m
[32m+[m[32m            ABC.join();[m
[32m+[m[41m            [m
[32m+[m[32m            /*[m
[32m+[m[32m            From these part I write the file[m[41m [m
[32m+[m[32m            equentially . That means, bytes downloaded from function1 and function2 are sequentially merged in the file .[m[41m [m
[32m+[m[32m            */[m
[32m+[m
[32m+[m[32m            for (int i = 0; i <= (counter1); ++i) {[m
[32m+[m[32m                file.write(buffer1[i], 0, read1[i]);[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            for (int i = 0; i < (counter2); ++i) {[m
[32m+[m[32m                file.write(buffer2[i], 0, read2[i]);[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            if (status == DOWNLOADING) {[m
[32m+[m[32m                System.out.println("Joss!!!");[m
[32m+[m[32m                status = COMPLETE;[m
[32m+[m[32m                stateChanged();[m
[32m+[m
[32m+[m[32m            }[m
[32m+[m[41m            [m
[32m+[m[32m            /*[m
[32m+[m[32m            movingDirectory is the current directory and targerDirectory is what I choose from 'Select Folder' button.If I select nothing then the[m
[32m+[m[32m            file will'be downloaded in the Project folder(By default).[m
[32m+[m[32m            */[m
[32m+[m
[32m+[m[32m            String movingDirectory = DownloadManager.targetDirectory;[m
[32m+[m[32m            System.out.println(movingDirectory);[m
[32m+[m
[32m+[m[32m        } catch (Exception e) {[m
[32m+[m[32m            error();[m
[32m+[m[32m        } finally {[m
[32m+[m[32m            if (file != null) {[m
[32m+[m[41m                [m
[32m+[m[41m                [m
[32m+[m
[32m+[m[32m                String movingDirectory = DownloadManager.targetDirectory;[m
[32m+[m[32m                String currentDirectory = System.getProperty("user.dir");[m
[32m+[m
[32m+[m[32m                try {[m
[32m+[m[32m                    file.close();[m
[32m+[m
[32m+[m[32m                    try {[m
[32m+[m[41m                        [m
[32m+[m[32m                        //if there is a file created then finally that file will be moved to target directory[m
[32m+[m
[32m+[m[32m                        File afile = new File(currentDirectory + "\\" + getFileName(url));[m
[32m+[m
[32m+[m[32m                        if (afile.renameTo(new File(movingDirectory + "\\" + getFileName(url)))) {[m
[32m+[m[32m                            System.out.println("File is moved successful!");[m
[32m+[m[32m                        } else {[m
[32m+[m[32m                            System.out.println("File is failed to move!");[m
[32m+[m[32m                        }[m
[32m+[m
[32m+[m[32m                    } catch (Exception e) {[m
[32m+[m[32m                        e.printStackTrace();[m
[32m+[m[32m                    }[m
[32m+[m
[32m+[m[32m                } catch (Exception e) {[m
[32m+[m[32m                    e.printStackTrace();[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            if (stream != null) {[m
[32m+[m[32m                try {[m
[32m+[m[32m                    stream.close();[m
[32m+[m[32m                } catch (Exception e) {[m
[32m+[m[32m                    e.printStackTrace();[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void stateChanged() {[m
         setChanged();[m
         notifyObservers();[m
     }[m
[31m-    [m
[32m+[m
[32m+[m[32m    public void function1(int size, int downloaded) throws IOException {[m
[32m+[m[41m        [m
[32m+[m[32m        /*[m
[32m+[m[32m        Here, new Thread in abc class is started. But value of this 'Download' class is passed to 'abc' class. This is called Pass By Reference.[m
[32m+[m[32m        So if there is a change in abc class then, the value of this class is changed .[m[41m [m
[32m+[m[32m        */[m
[32m+[m
[32m+[m[32m        ABC = new abc(this);[m
[32m+[m[32m        ABC.start();[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public int finction2(int size, int downloaded) throws IOException, InterruptedException {[m
[32m+[m[41m        [m
[32m+[m[32m        /*[m
[32m+[m[32m        Here, new Input Stream, HTTPURL connection, setRequestProperty all are set for this function.[m
[32m+[m[32m        */[m
[32m+[m[41m        [m
[32m+[m
[32m+[m[32m        InputStream streamX = null;[m
[32m+[m[32m        HttpURLConnection connectionX = (HttpURLConnection) url.openConnection();[m
[32m+[m[32m        connectionX.setRequestProperty("Range", "bytes=" + 0 + "-");[m
[32m+[m[32m        connectionX.connect();[m
[32m+[m[32m        streamX = connectionX.getInputStream();[m
[32m+[m
[32m+[m[32m        int counter2 = 0;[m
[32m+[m[32m        int flag2 = 0;[m
[32m+[m[41m        [m
[32m+[m[32m        //As I want to download 10,001-remaining bytes for this URL , so I use 'skip' function for skipping the bytes.[m[41m [m
[32m+[m
[32m+[m[32m        System.out.println("Skipped " + (byte) streamX.skip(10000 + 1215));[m
[32m+[m
[32m+[m[32m        while (status == DOWNLOADING) {[m
[32m+[m
[32m+[m[32m            if (size - downloaded > MAX_BUFFER_SIZE) {[m
[32m+[m
[32m+[m[32m                System.out.println("First Size-downloaded Part2 " + (size - downloaded));[m
[32m+[m[32m            } else {[m
[32m+[m
[32m+[m[32m                System.out.println("second Size-downloaded Part 2 " + (size - downloaded));[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            read2[counter2] = streamX.read(buffer2[counter2]);[m
[32m+[m
[32m+[m[32m            System.out.println("Read-- Part2 " + read2[counter2] + "\n");[m
[32m+[m
[32m+[m[32m            if (read2[counter2] == -1 || (size - downloaded) == 0) {[m
[32m+[m[32m                System.out.println("It is broken! part2 \n");[m
[32m+[m[32m                break;[m
[32m+[m[32m            }[m
[32m+[m[41m            [m
[32m+[m[32m            /*[m
[32m+[m[32m            This part is to actually seeing the original bytes[m[41m [m
[32m+[m[32m            */[m
[32m+[m
[32m+[m[32m            System.out.println("Bytes from Buffer1 ar (Part 2) ");[m
[32m+[m[32m            for (int i = 0; i < buffer2[counter2].length; ++i) {[m
[32m+[m[32m                System.out.print(" " + buffer2[counter2][i] + " ");[m
[32m+[m[32m            }[m
[32m+[m[32m            System.out.print("\n");[m
[32m+[m
[32m+[m[32m            downloaded += read2[counter2];[m
[32m+[m[32m            ++counter2;[m
[32m+[m[32m            System.out.println("Hiji Biji- Part 2 " + counter2);[m
[32m+[m[32m            stateChanged();[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        return counter2;[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
 }[m
[1mdiff --git a/src/download/manager/DownloadManager.java b/src/download/manager/DownloadManager.java[m
[1mindex 9ec86ba..d5bd420 100644[m
[1m--- a/src/download/manager/DownloadManager.java[m
[1m+++ b/src/download/manager/DownloadManager.java[m
[36m@@ -261,9 +261,9 @@[m [mimport javax.swing.event.*;[m
                  if(fc.showOpenDialog(this)==JFileChooser.APPROVE_OPTION)[m
                  {[m
                      targetDirectory=String.valueOf(fc.getSelectedFile());[m
[31m-                     //System.out.println(targetDirectory);[m
[32m+[m[41m                     [m
                  }[m
[31m-                 //selectionFlag=true;[m
[32m+[m[41m                [m
                 }[m
                 [m
                public static String getTargetDirectory()[m
